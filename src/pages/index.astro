---
import Layout from '../layouts/Layout.astro';
import Button from '../components/Button.astro';
import { readdirSync, statSync, existsSync, mkdirSync } from 'node:fs';
import { join, extname, basename } from 'node:path';
import { fileURLToPath } from 'node:url';
import sharp from 'sharp';

// Build-time discovery of images from `public/gallery`
let galleryImages: string[] = [];
try {
  const galleryDirUrl = new URL('../../public/gallery/', import.meta.url);
  const galleryDirPath = fileURLToPath(galleryDirUrl);
  const allowedExtensions = new Set(['.jpg', '.jpeg', '.png', '.webp', '.gif', '.avif', '.heic', '.heif']);
  const entries = readdirSync(galleryDirPath);

  const visited = new Set<string>();
  const items: Array<{ url: string; mtime: number }> = [];

  for (const name of entries) {
    const fullPath = join(galleryDirPath, name);
    let stats: ReturnType<typeof statSync> | null = null;
    try {
      stats = statSync(fullPath);
    } catch {
      continue;
    }
    if (!stats.isFile()) continue;

    const ext = extname(name).toLowerCase();
    if (!allowedExtensions.has(ext)) continue;

    // Handle HEIC/HEIF by converting to WEBP at build time and using the WEBP in the gallery
    if (ext === '.heic' || ext === '.heif') {
      const destName = `${basename(name, ext)}.webp`;
      const destPath = join(galleryDirPath, destName);
      if (!existsSync(destPath)) {
        try {
          // Ensure directory exists (paranoia for nested paths)
          mkdirSync(galleryDirPath, { recursive: true });
          await sharp(fullPath)
            .toColorspace('srgb')
            .webp({ quality: 82 })
            .toFile(destPath);
        } catch {
          // If conversion fails, skip adding the HEIC file (since many browsers can't render it)
          continue;
        }
      }
      if (!visited.has(destName)) {
        const mtime = statSync(destPath).mtimeMs;
        items.push({ url: `/gallery/${destName}`, mtime });
        visited.add(destName);
      }
      continue;
    }

    // Convert JPEG/JPG/AVIF to SDR WEBP to avoid HDR/gain-map rendering on capable displays
    if (ext === '.jpg' || ext === '.jpeg' || ext === '.avif') {
      const destName = `${basename(name, ext)}.webp`;
      const destPath = join(galleryDirPath, destName);
      if (!existsSync(destPath)) {
        try {
          mkdirSync(galleryDirPath, { recursive: true });
          // Force to sRGB to avoid HDR presentation; re-encode as 8-bit WEBP
          await sharp(fullPath)
            .toColorspace('srgb')
            .webp({ quality: 82 })
            .toFile(destPath);
        } catch {
          // Fallback to original if conversion fails
          if (!visited.has(name)) {
            items.push({ url: `/gallery/${name}`, mtime: stats.mtimeMs });
            visited.add(name);
          }
          continue;
        }
      }
      if (!visited.has(destName)) {
        const mtime = statSync(destPath).mtimeMs;
        items.push({ url: `/gallery/${destName}`, mtime });
        visited.add(destName);
      }
      continue;
    }

    // Regular supported formats
    if (!visited.has(name)) {
      items.push({ url: `/gallery/${name}`, mtime: stats.mtimeMs });
      visited.add(name);
    }
  }

  // Randomize order (Fisher–Yates shuffle)
  for (let i = items.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [items[i], items[j]] = [items[j], items[i]];
  }
  galleryImages = items.map((i) => i.url);
} catch {
  galleryImages = [];
}

// Build-time responsive variants and color LQIP placeholders for faster perceived loading
type GalleryMeta = {
  width: number;
  height: number;
  placeholder: string; // base64 data URI
  src: string; // default src (smallest responsive)
  srcset: string; // responsive candidates
};

let galleryMeta: Record<string, GalleryMeta> = {};

try {
  const galleryDirUrl = new URL('../../public/gallery/', import.meta.url);
  const galleryDirPath = fileURLToPath(galleryDirUrl);
  const resizedDirPath = fileURLToPath(new URL('../../public/gallery/_resized/', import.meta.url));
  mkdirSync(resizedDirPath, { recursive: true });

  const buildMetaFor = async (url: string): Promise<GalleryMeta | null> => {
    try {
      const fileName = url.replace('/gallery/', '');
      const absPath = join(galleryDirPath, fileName);
      const meta = await sharp(absPath).metadata();
      const origWidth = meta.width || 0;
      const origHeight = meta.height || 0;
      if (!origWidth || !origHeight) return null;

      const candidateWidths = [320, 640, 960].filter((w) => w <= origWidth);
      const widths = candidateWidths.length ? candidateWidths : [Math.min(320, Math.max(1, origWidth))];
      const entries: Array<{ url: string; w: number }> = [];

      for (const w of widths) {
        const outName = `${basename(fileName, extname(fileName))}-w${w}.webp`;
        const outPath = join(resizedDirPath, outName);
        if (!existsSync(outPath)) {
          await sharp(absPath)
            .toColorspace('srgb')
            .resize({ width: w })
            .webp({ quality: 80 })
            .toFile(outPath);
        }
        entries.push({ url: `/gallery/_resized/${outName}`, w });
      }

      const src = entries[0].url;
      const srcset = entries.map((e) => `${e.url} ${e.w}w`).join(', ');

      const lqipBuffer = await sharp(absPath)
        .toColorspace('srgb')
        .resize({ width: 24 })
        .webp({ quality: 40 })
        .toBuffer();
      const placeholder = `data:image/webp;base64,${lqipBuffer.toString('base64')}`;

      return { width: origWidth, height: origHeight, placeholder, src, srcset };
    } catch {
      return null;
    }
  };

  for (const url of galleryImages) {
    const m = await buildMetaFor(url);
    if (m) galleryMeta[url] = m;
  }
} catch {}
---

<Layout
	title="Acts College SF: Christian Fellowship for SFSU & USF Students"
	description="Acts College SF is a Christian fellowship for college students and young professionals in San Francisco. We serve SFSU, USF, and CCSF. Join us for worship, Bible study, and community!"
>
	<section class="hero">
		<video autoplay loop muted playsinline class="hero-video" poster="/header-banners/unsplash-image-OD9EOzfSOh0.webp" preload="none">
			<source src="/header-banners/Klesis SF Website Banner.mp4" type="video/mp4">
		</video>
		<div class="hero-overlay"></div>
		<div class="container">
			<h1>Acts College SF: A Christian Fellowship in San Francisco</h1>
			<p class="hero-subtitle">We're glad you're here!</p>
			<Button href="/connect" variant="primary" size="lg">I'M NEW!</Button>
		</div>
	</section>

	<section class="about-section">
		<div class="container">
			<h3>What is Acts College SF?</h3>
			<p>
				Acts College SF is a Christian fellowship serving college students and young professionals in the San Francisco area. 
				We gather weekly for worship, Bible study, and fellowship as we grow together in our faith.
			</p>
		</div>
	</section>

	<section class="instagram-section">
		<div class="container">
			<h2>Follow Us on Instagram!</h2>
			<p class="instagram-description">We’re one community with two college fellowships: Koinonia at SFSU and Klesis near USF and CCSF John Adams.</p>
			<div class="instagram-embeds">
				<div class="instagram-embed-item">
					<iframe class="instagram-iframe" src="https://www.instagram.com/sfsukoinonia/embed/" frameborder="0" scrolling="no" allowtransparency="true"></iframe>
				</div>
				<div class="instagram-embed-item">
					<iframe class="instagram-iframe" src="https://www.instagram.com/klesis.sanfrancisco/embed/" frameborder="0" scrolling="no" allowtransparency="true"></iframe>
				</div>
			</div>
		</div>
	</section>

	<section class="events-section">
		<div class="container">
			<h2>Upcoming Events</h2>
			<p>Stay up to date with all our community events and activities</p>
			<div class="calendar-embed">
				<iframe
					class="calendar-month-view"
					src="https://calendar.google.com/calendar/u/0/embed?height=600&wkst=1&bgcolor=%23ffffff&ctz=America/Los_Angeles&showPrint=0&showTabs=0&showCalendars=0&src=Y19hZjg5NDZhZWMxMzkxZTJmOTY0YzIxZWVmYTY2NDM3MjNhNGEyZTM5MDkyYzU0ZDdjZGFmMWY0Y2NjMTQ0Mjk4QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&color=%233F51B5&wmode=opaque"
					title="Klesis Events Calendar"
					width="100%"
					height="600"
					frameborder="0"
					scrolling="no"
					loading="lazy">
				</iframe>
				<iframe
					class="calendar-list-view"
					src="https://calendar.google.com/calendar/u/0/embed?height=600&wkst=1&bgcolor=%23ffffff&ctz=America/Los_Angeles&showPrint=0&showTabs=0&showCalendars=0&src=Y19hZjg5NDZhZWMxMzkxZTJmOTY0YzIxZWVmYTY2NDM3MjNhNGEyZTM5MDkyYzU0ZDdjZGFmMWY0Y2NjMTQ0Mjk4QGdyb3VwLmNhbGVuZGFyLmdvb2dsZS5jb20&color=%233F51B5&wmode=opaque&mode=AGENDA"
					title="Klesis Events Calendar"
					width="100%"
					height="600"
					frameborder="0"
					scrolling="no"
					loading="lazy">
				</iframe>
			</div>
		</div>
	</section>

	<!-- Gallery Section at the bottom of the homepage -->
	<section class="gallery-section" aria-label="Photo gallery">
		<div class="container">
			<h3>Gallery</h3>
			<div class="gallery-grid">
				{galleryImages.map((href, index) => {
					const meta = galleryMeta[href];
					const eager = index < 8; // prioritize first rows
					const bgStyle = meta ? `background-image: url('${meta.placeholder}'); background-size: cover; background-position: center; background-repeat: no-repeat;` : undefined;
					const getAltText = (url: string) => {
						try {
							const fileName = url.split('/').pop()?.split('.').slice(0, -1).join('.') ?? '';
							const cleanedName = decodeURIComponent(fileName).replace(/[_-]/g, ' ');
							if (/^(PXL|IMG|DSC)/i.test(cleanedName)) {
								return 'A photo from the Acts College SF gallery';
							}
							const finalName = cleanedName.charAt(0).toUpperCase() + cleanedName.slice(1);
							return `Acts College SF - ${finalName}`;
						} catch {
							return 'A photo from the Acts College SF gallery';
						}
					};
					return (
						<a class="gallery-item" href={href} target="_blank" rel="noopener noreferrer" style={bgStyle}>
							<img
								src={meta ? meta.src : href}
								srcset={meta && meta.srcset}
								sizes="(max-width: 768px) 50vw, 25vw"
								width={meta && meta.width}
								height={meta && meta.height}
								alt={getAltText(href)}
								loading={eager ? 'eager' : 'lazy'}
								decoding="async"
								fetchpriority={eager ? 'high' : 'auto'}
							/>
						</a>
					);
				})}
			</div>
		</div>
	</section>
	
</Layout>
<script>
	document.addEventListener('DOMContentLoaded', () => {
		const video = document.querySelector('.hero-video') as HTMLVideoElement;
		video.load();

		// Fade-in gallery images when they are loaded and remove LQIP background
		const imgs = document.querySelectorAll('.gallery-item img') as NodeListOf<HTMLImageElement>;
		imgs.forEach((img) => {
			const parent = img.closest('.gallery-item') as HTMLElement | null;
			const reveal = () => {
				if (!parent) return;
				parent.classList.add('loaded');
				parent.style.backgroundImage = 'none';
			};
			if (img.complete && img.naturalWidth > 0) {
				reveal();
			} else {
				img.addEventListener('load', reveal, { once: true });
			}
		});
	});
</script>

<style>
	.container {
		max-width: var(--container-max-width);
		margin: 0 auto;
		padding: 0 var(--spacing-md);
	}

	/* Hero Section */
	.hero {
		position: relative;
		overflow: hidden;
		color: white;
		padding: var(--space-xl) 0 var(--space-xl) 0;
		text-align: center;
	}

	.hero-video {
		position: absolute;
		top: 50%;
		left: 50%;
		min-width: 100%;
		min-height: 100%;
		width: auto;
		height: auto;
		z-index: -2;
		transform: translateX(-50%) translateY(-50%);
		background-size: cover;
	}

	.hero-overlay {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: var(--overlay);
		z-index: -1;
	}

	.hero h1 {
		font-size: 3.5rem;
		font-weight: 700;
		margin-bottom: var(--spacing-sm);
	}

	.hero-subtitle {
		font-size: 1.5rem;
		margin-bottom: var(--spacing-md);
		opacity: 0.9;
	}

	/* Instagram Section */
	.instagram-section {
		padding: var(--space-lg) 0;
		background: var(--color-bg-alt);
		border-top: 1px solid var(--color-border);
		text-align: center;
	}

	.instagram-section h2 {
		font-size: var(--font-large);
		font-weight: 700;
		margin-bottom: var(--spacing-md);
		color: var(--color-text);
	}

	.instagram-description {
		font-size: 1.1rem;
		line-height: 1.8;
		max-width: 800px;
		margin: 0 auto var(--space-lg);
		text-align: center;
		color: #475569;
	}

	.instagram-embeds {
		display: flex;
		flex-wrap: wrap;
		justify-content: center;
		gap: var(--spacing-md);
	}

	.instagram-embed-item {
		flex: 1;
		min-width: 300px;
		max-width: 450px;
		background: var(--color-bg);
		border-radius: var(--radius);
		box-shadow: var(--shadow);
		overflow: hidden;
		padding-bottom: var(--spacing-sm);
	}

	.instagram-embed-item h3 {
		font-size: 1.5rem;
		margin-top: 1rem;
		margin-bottom: 1rem;
		color: #333;
	}

	.instagram-iframe {
		width: 100%;
		height: 500px; /* Adjust height as needed */
		border: none;
	}

	.instagram-embed-item p {
		margin-top: 1rem;
	}

	.instagram-embed-item a {
		color: #4f46e5;
		text-decoration: none;
		font-weight: 500;
		transition: color 0.3s ease;
	}

	.instagram-embed-item a:hover {
		color: #7c3aed;
		text-decoration: underline;
	}

	@media (max-width: 768px) {
		.instagram-embeds {
			flex-direction: column;
			align-items: center;
		}
	}

	/* About Section */
	.about-section {
		padding: 4rem 0;
		background: white;
	}

	.about-section h3 {
		font-size: 2rem;
		color: #1e293b;
		margin-bottom: 2rem;
		text-align: center;
	}

	.about-section p {
		font-size: 1.1rem;
		line-height: 1.8;
		max-width: 800px;
		margin: 0 auto;
		text-align: center;
		color: #475569;
	}

	/* Events Section */
	.events-section {
		padding: 4rem 0;
		background: #f1f5f9;
		text-align: center;
	}

	.events-section h2 {
		font-size: 2rem;
		color: #1e293b;
		margin-bottom: 1rem;
	}

	.events-section p {
		font-size: 1.1rem;
		color: #64748b;
		margin-bottom: 2rem;
	}

	.calendar-embed {
		max-width: 900px;
		margin: 0 auto;
		border-radius: 12px;
		overflow: hidden;
		box-shadow: 0 4px 6px rgba(0,0,0,0.1);
		border: 1px solid #e2e8f0;
		background: white;
	}

	.calendar-embed iframe {
		width: 100%;
		height: 600px;
		border: none;
		display: block;
	}

	.calendar-embed .calendar-list-view {
		display: none;
	}

	/* Videos Section */
	.videos-section {
		padding: 4rem 0;
		background: white;
		text-align: center;
	}

	.videos-section h3 {
		font-size: 2rem;
		color: #1e293b;
		margin-bottom: 2rem;
	}

	.video-placeholder {
		background: #f8fafc;
		padding: 3rem;
		border-radius: 12px;
		max-width: 600px;
		margin: 0 auto;
	}

	.video-placeholder p {
		color: #94a3b8;
		font-size: 1rem;
		margin: 0;
	}

	/* Statement Section */
	.statement-section {
		padding: 4rem 0;
		background: #f8fafc;
		text-align: center;
	}

	/* Gallery Section */
	.gallery-section {
		padding: 4rem 0;
		background: white;
	}

	.gallery-section h3 {
		font-size: 2rem;
		color: #1e293b;
		margin-bottom: 2rem;
		text-align: center;
	}

	.gallery-grid {
		/* Masonry-style columns */
		-webkit-column-count: 4;
		-moz-column-count: 4;
		column-count: 4;
		-webkit-column-gap: 12px;
		-moz-column-gap: 12px;
		column-gap: 12px;
	}

	.gallery-item {
		display: block;
		position: relative;
		border-radius: 12px;
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		background: #f1f5f9;
		background-position: center;
		background-size: cover;
		background-repeat: no-repeat;
		/* Prevent items from breaking between columns */
		break-inside: avoid;
		-webkit-column-break-inside: avoid;
		-moz-column-break-inside: avoid;
		page-break-inside: avoid;
		margin-bottom: 12px;
	}

	.gallery-item img {
		display: block;
		width: 100%;
		height: auto;
		object-fit: cover;
		transition: opacity 0.3s ease, transform 0.4s ease;
		opacity: 0; /* reveal after full-res loads */
	}

	.gallery-item:hover img {
		transform: scale(1.04);
	}

	.gallery-item.loaded img {
		opacity: 1;
	}

	/* Mobile Styles */
	@media (max-width: 768px) {
		.container {
			padding: 0 1rem;
		}

		.hero {
			padding: 4rem 0;
		}

		.hero h1 {
			font-size: 2.5rem;
		}

		.hero-subtitle {
			font-size: 1.2rem; 
		}

		.instagram-section,
		.about-section,
		.events-section,
		.videos-section,
		.statement-section,
		.gallery-section {
			padding: 3rem 0;
		}


		.gallery-grid {
			-webkit-column-count: 2;
			-moz-column-count: 2;
			column-count: 2;
			-webkit-column-gap: 8px;
			-moz-column-gap: 8px;
			column-gap: 8px;
		}

		.calendar-embed .calendar-month-view {
			display: none;
		}

		.calendar-embed .calendar-list-view {
			display: block;
		}

		.calendar-embed iframe {
			height: 500px;
		}

		.calendar-placeholder,
		.video-placeholder {
			padding: 2rem;
		}
	}
</style>
